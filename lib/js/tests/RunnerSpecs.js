// Generated by BUCKLESCRIPT VERSION 2.0.0, PLEASE EDIT WITH CARE
'use strict';

var Curry           = require("bs-platform/lib/js/curry.js");
var Respect         = require("../src/Respect.js");
var Pervasives      = require("bs-platform/lib/js/pervasives.js");
var TestContext     = require("../src/TestContext.js");
var TestHelpers     = require("./TestHelpers.js");
var Respect_async   = require("../src/Respect_async.js");
var Caml_exceptions = require("bs-platform/lib/js/caml_exceptions.js");
var Respect_matcher = require("../src/Respect_matcher.js");

var TestFailed = Caml_exceptions.create("RunnerSpecs.TestFailed");

function run(ex, cb) {
  return Respect_async.run(cb, Respect.Runner[/* run */2](ex));
}

Curry._1(Respect.Dsl[/* Async */12][/* register */3], Curry._2(Respect.Dsl[/* Async */12][/* describe */2], "Runner", /* :: */[
          Curry._2(Respect.Dsl[/* Async */12][/* describe */2], "Group has a setup", /* :: */[
                Curry._2(Respect.Dsl[/* Async */12][/* it */1], "Doesn't execute example code when setup code fails", (function (_, don) {
                        var lines = [/* [] */0];
                        var append = function (line) {
                          lines[0] = Pervasives.$at(lines[0], /* :: */[
                                line,
                                /* [] */0
                              ]);
                          return /* () */0;
                        };
                        var eta = Curry._1(TestHelpers.withSetup((function (_, cb) {
                                    append("setup");
                                    return Curry._1(cb, /* TestFailed */2);
                                  })), TestHelpers.anExampleGroup);
                        var arg = /* Some */[(function (_, cb) {
                              append("test");
                              return Curry._1(cb, /* TestSucceeded */1);
                            })];
                        var ex = Curry._1((function (param, param$1) {
                                  return (function (param$2) {
                                      return TestHelpers.withExample(param, param$1, arg, param$2);
                                    });
                                })(/* None */0, /* None */0), eta);
                        return run(ex, (function () {
                                      var partial_arg = lines[0];
                                      var partial_arg$1 = /* :: */[
                                        "setup",
                                        /* [] */0
                                      ];
                                      var partial_arg$2 = function (param) {
                                        return Respect_matcher.equal(partial_arg$1, param);
                                      };
                                      return (function (param) {
                                                  return Respect_matcher.shoulda(partial_arg$2, partial_arg, param);
                                                })(don);
                                    }));
                      })),
                /* :: */[
                  Curry._2(Respect.Dsl[/* Async */12][/* it */1], "Executes multiple setups before the example", (function (_, don) {
                          var lines = [/* [] */0];
                          var append = function (line) {
                            lines[0] = Pervasives.$at(lines[0], /* :: */[
                                  line,
                                  /* [] */0
                                ]);
                            return /* () */0;
                          };
                          var eta = Curry._1(TestHelpers.withSetup((function (_, cb) {
                                      append("setup 2");
                                      return Curry._1(cb, /* TestSucceeded */1);
                                    })), Curry._1(TestHelpers.withSetup((function (_, cb) {
                                          append("setup 1");
                                          return Curry._1(cb, /* TestSucceeded */1);
                                        })), TestHelpers.anExampleGroup));
                          var arg = /* Some */[(function (_, cb) {
                                append("test");
                                return Curry._1(cb, /* TestSucceeded */1);
                              })];
                          var ex = Curry._1((function (param, param$1) {
                                    return (function (param$2) {
                                        return TestHelpers.withExample(param, param$1, arg, param$2);
                                      });
                                  })(/* None */0, /* None */0), eta);
                          return run(ex, (function () {
                                        var partial_arg = lines[0];
                                        var partial_arg$1 = /* :: */[
                                          "setup 1",
                                          /* :: */[
                                            "setup 2",
                                            /* :: */[
                                              "test",
                                              /* [] */0
                                            ]
                                          ]
                                        ];
                                        var partial_arg$2 = function (param) {
                                          return Respect_matcher.equal(partial_arg$1, param);
                                        };
                                        return (function (param) {
                                                    return Respect_matcher.shoulda(partial_arg$2, partial_arg, param);
                                                  })(don);
                                      }));
                        })),
                  /* :: */[
                    Curry._2(Respect.Dsl[/* Async */12][/* it */1], "Executes the setup code before the example", (function (_, don) {
                            var lines = [/* [] */0];
                            var append = function (line) {
                              lines[0] = Pervasives.$at(lines[0], /* :: */[
                                    line,
                                    /* [] */0
                                  ]);
                              return /* () */0;
                            };
                            var eta = Curry._1(TestHelpers.withSetup((function (_, cb) {
                                        append("setup");
                                        return Curry._1(cb, /* TestSucceeded */1);
                                      })), TestHelpers.anExampleGroup);
                            var arg = /* Some */[(function (_, cb) {
                                  append("test");
                                  return Curry._1(cb, /* TestSucceeded */1);
                                })];
                            var ex = Curry._1((function (param, param$1) {
                                      return (function (param$2) {
                                          return TestHelpers.withExample(param, param$1, arg, param$2);
                                        });
                                    })(/* None */0, /* None */0), eta);
                            return run(ex, (function () {
                                          var partial_arg = lines[0];
                                          var partial_arg$1 = /* :: */[
                                            "setup",
                                            /* :: */[
                                              "test",
                                              /* [] */0
                                            ]
                                          ];
                                          var partial_arg$2 = function (param) {
                                            return Respect_matcher.equal(partial_arg$1, param);
                                          };
                                          return (function (param) {
                                                      return Respect_matcher.shoulda(partial_arg$2, partial_arg, param);
                                                    })(don);
                                        }));
                          })),
                    /* :: */[
                      Curry._2(Respect.Dsl[/* Async */12][/* describe */2], "Group has two examples", /* :: */[
                            Curry._2(Respect.Dsl[/* Async */12][/* it */1], "Runs the setup before each example", (function (_, don) {
                                    var lines = [/* [] */0];
                                    var append = function (line) {
                                      lines[0] = Pervasives.$at(lines[0], /* :: */[
                                            line,
                                            /* [] */0
                                          ]);
                                      return /* () */0;
                                    };
                                    var eta = Curry._1(TestHelpers.withSetup((function (_, cb) {
                                                append("setup");
                                                return Curry._1(cb, /* TestSucceeded */1);
                                              })), TestHelpers.anExampleGroup);
                                    var arg = /* Some */[(function (_, cb) {
                                          append("test 1");
                                          return Curry._1(cb, /* TestSucceeded */1);
                                        })];
                                    var eta$1 = Curry._1((function (param, param$1) {
                                              return (function (param$2) {
                                                  return TestHelpers.withExample(param, param$1, arg, param$2);
                                                });
                                            })(/* None */0, /* None */0), eta);
                                    var arg$1 = /* Some */[(function (_, cb) {
                                          append("test 2");
                                          return Curry._1(cb, /* TestSucceeded */1);
                                        })];
                                    var ex = Curry._1((function (param, param$1) {
                                              return (function (param$2) {
                                                  return TestHelpers.withExample(param, param$1, arg$1, param$2);
                                                });
                                            })(/* None */0, /* None */0), eta$1);
                                    return run(ex, (function () {
                                                  var partial_arg = lines[0];
                                                  var partial_arg$1 = /* :: */[
                                                    "setup",
                                                    /* :: */[
                                                      "test 1",
                                                      /* :: */[
                                                        "setup",
                                                        /* :: */[
                                                          "test 2",
                                                          /* [] */0
                                                        ]
                                                      ]
                                                    ]
                                                  ];
                                                  var partial_arg$2 = function (param) {
                                                    return Respect_matcher.equal(partial_arg$1, param);
                                                  };
                                                  return (function (param) {
                                                              return Respect_matcher.shoulda(partial_arg$2, partial_arg, param);
                                                            })(don);
                                                }));
                                  })),
                            /* [] */0
                          ]),
                      /* :: */[
                        Curry._2(Respect.Dsl[/* Async */12][/* describe */2], "Nested groups", /* :: */[
                              Curry._2(Respect.Dsl[/* Async */12][/* it */1], "Runs the setups from outermost to innermost group", (function (_, don) {
                                      var lines = [/* [] */0];
                                      var append = function (line) {
                                        lines[0] = Pervasives.$at(lines[0], /* :: */[
                                              line,
                                              /* [] */0
                                            ]);
                                        return /* () */0;
                                      };
                                      var eta = Curry._1(TestHelpers.withSetup((function (_, cb) {
                                                  append("inner setup");
                                                  return Curry._1(cb, /* TestSucceeded */1);
                                                })), TestHelpers.anExampleGroup);
                                      var arg = /* Some */[(function (_, cb) {
                                            append("inner test");
                                            return Curry._1(cb, /* TestSucceeded */1);
                                          })];
                                      var innerGroup = Curry._1((function (param, param$1) {
                                                return (function (param$2) {
                                                    return TestHelpers.withExample(param, param$1, arg, param$2);
                                                  });
                                              })(/* None */0, /* None */0), eta);
                                      var arg$1 = /* Some */[(function (_, cb) {
                                            append("outer test");
                                            return Curry._1(cb, /* TestSucceeded */1);
                                          })];
                                      var outerGroup = TestHelpers.withChildGroup(innerGroup, Curry._1((function (param, param$1) {
                                                    return (function (param$2) {
                                                        return TestHelpers.withExample(param, param$1, arg$1, param$2);
                                                      });
                                                  })(/* None */0, /* None */0), Curry._1(TestHelpers.withSetup((function (_, cb) {
                                                          append("outer setup");
                                                          return Curry._1(cb, /* TestSucceeded */1);
                                                        })), TestHelpers.anExampleGroup)));
                                      return run(outerGroup, (function () {
                                                    var partial_arg = lines[0];
                                                    return (function (param) {
                                                                return Respect_matcher.shoulda((function (param) {
                                                                              return Respect_matcher.equal(/* :: */[
                                                                                          "outer setup",
                                                                                          /* :: */[
                                                                                            "outer test",
                                                                                            /* :: */[
                                                                                              "outer setup",
                                                                                              /* :: */[
                                                                                                "inner setup",
                                                                                                /* :: */[
                                                                                                  "inner test",
                                                                                                  /* [] */0
                                                                                                ]
                                                                                              ]
                                                                                            ]
                                                                                          ]
                                                                                        ], param);
                                                                            }), partial_arg, param);
                                                              })(don);
                                                  }));
                                    })),
                              /* [] */0
                            ]),
                        /* [] */0
                      ]
                    ]
                  ]
                ]
              ]),
          /* :: */[
            Curry._2(Respect.Dsl[/* Async */12][/* describe */2], "ExampleGroup has metadata", /* :: */[
                  Curry._2(Respect.Dsl[/* Async */12][/* it */1], "Initializes the metadata on the test context", (function (_, don) {
                          var lines = [/* [] */0];
                          var append = function (line) {
                            lines[0] = Pervasives.$at(lines[0], /* :: */[
                                  line,
                                  /* [] */0
                                ]);
                            return /* () */0;
                          };
                          var eta = TestHelpers.withMetadata(/* tuple */[
                                "data",
                                "value"
                              ], TestHelpers.anExampleGroup);
                          var arg = /* Some */[(function (ctx, cb) {
                                append(TestContext.get("data", ctx));
                                return Curry._1(cb, /* TestSucceeded */1);
                              })];
                          var grp = Curry._1((function (param, param$1) {
                                    return (function (param$2) {
                                        return TestHelpers.withExample(param, param$1, arg, param$2);
                                      });
                                  })(/* None */0, /* None */0), eta);
                          return run(grp, (function () {
                                        var partial_arg = lines[0];
                                        return (function (param) {
                                                    return Respect_matcher.shoulda((function (param) {
                                                                  return Respect_matcher.equal(/* :: */[
                                                                              "value",
                                                                              /* [] */0
                                                                            ], param);
                                                                }), partial_arg, param);
                                                  })(don);
                                      }));
                        })),
                  /* [] */0
                ]),
            /* :: */[
              Curry._2(Respect.Dsl[/* Async */12][/* describe */2], "Parent group has metadata", /* :: */[
                    Curry._2(Respect.Dsl[/* Async */12][/* it */1], "uses the metadata closest to the example", (function (_, don) {
                            var lines = [/* [] */0];
                            var append = function (line) {
                              lines[0] = Pervasives.$at(lines[0], /* :: */[
                                    line,
                                    /* [] */0
                                  ]);
                              return /* () */0;
                            };
                            var arg = /* Some */[(function (ctx, cb) {
                                  append(TestContext.get("data1", ctx));
                                  append(TestContext.get("data2", ctx));
                                  append(TestContext.get("data3", ctx));
                                  return Curry._1(cb, /* TestSucceeded */1);
                                })];
                            var arg$1 = function (param) {
                              return Curry._3(TestHelpers.withExample, /* Some */[/* tuple */[
                                            "data3",
                                            "test"
                                          ]], param, arg);
                            };
                            var innerGroup = (function (eta) {
                                  return Curry._1(arg$1(/* None */0), eta);
                                })(TestHelpers.withMetadata(/* tuple */[
                                      "data3",
                                      "inner"
                                    ], TestHelpers.withMetadata(/* tuple */[
                                          "data2",
                                          "inner"
                                        ], TestHelpers.anExampleGroup)));
                            var outerGroup = TestHelpers.withChildGroup(innerGroup, TestHelpers.withMetadata(/* tuple */[
                                      "data3",
                                      "outer"
                                    ], TestHelpers.withMetadata(/* tuple */[
                                          "data2",
                                          "outer"
                                        ], TestHelpers.withMetadata(/* tuple */[
                                              "data1",
                                              "outer"
                                            ], TestHelpers.anExampleGroup))));
                            return run(outerGroup, (function () {
                                          var partial_arg = lines[0];
                                          return (function (param) {
                                                      return Respect_matcher.shoulda((function (param) {
                                                                    return Respect_matcher.equal(/* :: */[
                                                                                "outer",
                                                                                /* :: */[
                                                                                  "inner",
                                                                                  /* :: */[
                                                                                    "test",
                                                                                    /* [] */0
                                                                                  ]
                                                                                ]
                                                                              ], param);
                                                                  }), partial_arg, param);
                                                    })(don);
                                        }));
                          })),
                    /* [] */0
                  ]),
              /* :: */[
                Curry._2(Respect.Dsl[/* Async */12][/* describe */2], "example throws an exception", /* :: */[
                      Curry._2(Respect.Dsl[/* Async */12][/* it */1], "returns an error message", (function (_, don) {
                              var ex = Curry._1(TestHelpers.withExampleCode((function () {
                                          throw [
                                                TestFailed,
                                                ""
                                              ];
                                        })), TestHelpers.anExampleGroup);
                              return run(ex, (function (param) {
                                            if (param >= 2) {
                                              return Curry._2(don, /* None */0, /* () */0);
                                            } else {
                                              return Curry._2(don, /* Some */["Should fail"], /* () */0);
                                            }
                                          }));
                            })),
                      /* [] */0
                    ]),
                /* :: */[
                  Curry._2(Respect.Dsl[/* Async */12][/* it */1], "executes the example code", (function () {
                          var lines = [/* [] */0];
                          var ex = Curry._1(TestHelpers.withExampleCode((function () {
                                      var line = "x";
                                      lines[0] = /* :: */[
                                        line,
                                        lines[0]
                                      ];
                                      return /* () */0;
                                    })), TestHelpers.anExampleGroup);
                          run(ex, (function () {
                                  return /* () */0;
                                }));
                          var partial_arg = lines[0];
                          var partial_arg$1 = /* :: */[
                            "x",
                            /* [] */0
                          ];
                          var partial_arg$2 = function (param) {
                            return Respect_matcher.equal(partial_arg$1, param);
                          };
                          return (function (param) {
                              return Respect_matcher.shoulda(partial_arg$2, partial_arg, param);
                            });
                        })),
                  /* [] */0
                ]
              ]
            ]
          ]
        ]));

var As = 0;

exports.As         = As;
exports.TestFailed = TestFailed;
exports.run        = run;
/*  Not a pure module */
