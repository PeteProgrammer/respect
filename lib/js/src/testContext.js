// Generated by BUCKLESCRIPT VERSION 2.0.0, PLEASE EDIT WITH CARE
'use strict';

var $$Map          = require("bs-platform/lib/js/map.js");
var Curry          = require("bs-platform/lib/js/curry.js");
var $$String       = require("bs-platform/lib/js/string.js");
var Js_option      = require("bs-platform/lib/js/js_option.js");
var Caml_oo_curry  = require("bs-platform/lib/js/caml_oo_curry.js");
var CamlinternalOO = require("bs-platform/lib/js/camlinternalOO.js");

var include = $$Map.Make([$$String.compare]);

var add = include[3];

var merge = include[6];

var find = include[21];

function merge$1(a, b) {
  return Curry._3(merge, (function (_, x, y) {
                if (x) {
                  return x;
                } else {
                  return y;
                }
              }), a, b);
}

var ContextMap_000 = /* empty */include[0];

var ContextMap_001 = /* is_empty */include[1];

var ContextMap_002 = /* mem */include[2];

var ContextMap_004 = /* singleton */include[4];

var ContextMap_005 = /* remove */include[5];

var ContextMap_006 = /* compare */include[7];

var ContextMap_007 = /* equal */include[8];

var ContextMap_008 = /* iter */include[9];

var ContextMap_009 = /* fold */include[10];

var ContextMap_010 = /* for_all */include[11];

var ContextMap_011 = /* exists */include[12];

var ContextMap_012 = /* filter */include[13];

var ContextMap_013 = /* partition */include[14];

var ContextMap_014 = /* cardinal */include[15];

var ContextMap_015 = /* bindings */include[16];

var ContextMap_016 = /* min_binding */include[17];

var ContextMap_017 = /* max_binding */include[18];

var ContextMap_018 = /* choose */include[19];

var ContextMap_019 = /* split */include[20];

var ContextMap_021 = /* map */include[22];

var ContextMap_022 = /* mapi */include[23];

var ContextMap = /* module */[
  ContextMap_000,
  ContextMap_001,
  ContextMap_002,
  /* add */add,
  ContextMap_004,
  ContextMap_005,
  ContextMap_006,
  ContextMap_007,
  ContextMap_008,
  ContextMap_009,
  ContextMap_010,
  ContextMap_011,
  ContextMap_012,
  ContextMap_013,
  ContextMap_014,
  ContextMap_015,
  ContextMap_016,
  ContextMap_017,
  ContextMap_018,
  ContextMap_019,
  /* find */find,
  ContextMap_021,
  ContextMap_022,
  /* merge */merge$1
];

var class_tables = [
  0,
  0,
  0
];

function create(metaData) {
  if (!class_tables[0]) {
    var $$class = CamlinternalOO.create_table([
          "add",
          "get",
          "setSubj",
          "subject"
        ]);
    var ids = CamlinternalOO.new_methods_variables($$class, [
          "subject",
          "setSubj",
          "get",
          "add"
        ], [
          "data",
          "subjFn",
          "subj"
        ]);
    var subject = ids[0];
    var setSubj = ids[1];
    var get = ids[2];
    var add$1 = ids[3];
    var data = ids[4];
    var subjFn = ids[5];
    var subj = ids[6];
    CamlinternalOO.set_methods($$class, /* array */[
          add$1,
          (function (self$1, key, x) {
              self$1[data] = Curry._3(add, key, x, self$1[data]);
              return self$1;
            }),
          get,
          (function (self$1, key) {
              return Curry._2(find, key, self$1[data]);
            }),
          setSubj,
          (function (self$1, fn) {
              self$1[subjFn] = /* Some */[Curry.__1(fn)];
              return self$1;
            }),
          subject,
          (function (self$1, _) {
              var match = self$1[subj];
              if (match) {
                return match[0];
              } else {
                var s = Curry._1(Js_option.getExn(self$1[subjFn]), self$1);
                self$1[subj] = /* Some */[s];
                return s;
              }
            })
        ]);
    var env_init = function (env) {
      var self = CamlinternalOO.create_object_opt(0, $$class);
      self[data] = env[1];
      self[subjFn] = /* None */0;
      self[subj] = /* None */0;
      return self;
    };
    CamlinternalOO.init_class($$class);
    class_tables[0] = env_init;
  }
  return Curry._1(class_tables[0], [
              0,
              metaData
            ]);
}

function add$1(key, x, ctx) {
  return Caml_oo_curry.js3(4846113, 1, ctx, key, x);
}

function get(key, ctx) {
  return Caml_oo_curry.js2(5144726, 2, ctx, key);
}

exports.ContextMap = ContextMap;
exports.create     = create;
exports.add        = add$1;
exports.get        = get;
/* include Not a pure module */
