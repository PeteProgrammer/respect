// Generated by BUCKLESCRIPT VERSION 2.1.0, PLEASE EDIT WITH CARE
'use strict';

var List           = require("bs-platform/lib/js/list.js");
var Block          = require("bs-platform/lib/js/block.js");
var Curry          = require("bs-platform/lib/js/curry.js");
var Respect_ctx    = require("./Respect_ctx.js");
var Respect_domain = require("./Respect_domain.js");

function wrapTest(fn, ctx, callback) {
  try {
    Curry._1(fn, ctx);
    return Curry._1(callback, /* TestSucceeded */1);
  }
  catch (exn){
    return Curry._1(callback, /* TestFailed */2);
  }
}

function wrapW(fn, ctx, callback) {
  return Curry._2(fn, ctx, (function (err, _) {
                if (err) {
                  return Curry._1(callback, /* TestFailed */2);
                } else {
                  return Curry._1(callback, /* TestSucceeded */1);
                }
              }));
}

function it(name, ex) {
  return /* AddExampleOperation */Block.__(2, [
            name,
            (function (param, param$1) {
                return wrapTest(ex, param, param$1);
              })
          ]);
}

function it_a(name, ex) {
  return /* AddExampleOperation */Block.__(2, [
            name,
            ex
          ]);
}

function it_w(name, ex) {
  return /* AddExampleOperation */Block.__(2, [
            name,
            (function (param, param$1) {
                return wrapW(ex, param, param$1);
              })
          ]);
}

function describe(name, ops) {
  return /* AddChildGroupOperation */Block.__(1, [
            name,
            ops
          ]);
}

function beforeEach(fn) {
  return /* AddSetupOperation */Block.__(3, [(function (param, param$1) {
                return wrapTest(fn, param, param$1);
              })]);
}

function beforeEach_w(fn) {
  return /* AddSetupOperation */Block.__(3, [(function (param, param$1) {
                return wrapW(fn, param, param$1);
              })]);
}

function applyOperation(_operation, context, _metadata) {
  while(true) {
    var metadata = _metadata;
    var operation = _operation;
    switch (operation.tag | 0) {
      case 0 : 
          var match = operation[0];
          _metadata = Curry._3(Respect_ctx.ContextMap[/* add */3], match[0], match[1], metadata);
          _operation = operation[1];
          continue ;
          case 1 : 
          var init = Respect_domain.ExampleGroup[/* empty */0];
          var initial_000 = /* name */operation[0];
          var initial_001 = /* children */init[/* children */1];
          var initial_002 = /* setups */init[/* setups */2];
          var initial_003 = /* examples */init[/* examples */3];
          var initial = /* record */[
            initial_000,
            initial_001,
            initial_002,
            initial_003,
            /* metadata */metadata
          ];
          var newChild = List.fold_left((function (grp, op) {
                  return applyOperation(op, grp, Respect_ctx.ContextMap[/* empty */0]);
                }), initial, operation[1]);
          var newChild$prime_000 = /* name */newChild[/* name */0];
          var newChild$prime_001 = /* children */List.rev(newChild[/* children */1]);
          var newChild$prime_002 = /* setups */newChild[/* setups */2];
          var newChild$prime_003 = /* examples */List.rev(newChild[/* examples */3]);
          var newChild$prime_004 = /* metadata */newChild[/* metadata */4];
          var newChild$prime = /* record */[
            newChild$prime_000,
            newChild$prime_001,
            newChild$prime_002,
            newChild$prime_003,
            newChild$prime_004
          ];
          return /* record */[
                  /* name */context[/* name */0],
                  /* children : :: */[
                    newChild$prime,
                    context[/* children */1]
                  ],
                  /* setups */context[/* setups */2],
                  /* examples */context[/* examples */3],
                  /* metadata */context[/* metadata */4]
                ];
      case 2 : 
          return /* record */[
                  /* name */context[/* name */0],
                  /* children */context[/* children */1],
                  /* setups */context[/* setups */2],
                  /* examples : :: */[
                    /* record */[
                      /* name */operation[0],
                      /* func */operation[1],
                      /* metadata */metadata
                    ],
                    context[/* examples */3]
                  ],
                  /* metadata */context[/* metadata */4]
                ];
      case 3 : 
          return Respect_domain.ExampleGroup[/* addSetup */3](/* Setup */[operation[0]], context);
      
    }
  };
}

function applyOperation$1(operation, context) {
  return applyOperation(operation, context, Respect_ctx.ContextMap[/* empty */0]);
}

var rootContext = [Respect_domain.ExampleGroup[/* empty */0]];

function register(op) {
  rootContext[0] = applyOperation$1(op, rootContext[0]);
  return /* () */0;
}

function $star$star$great(param, op) {
  return /* WrapMetadata */Block.__(0, [
            /* tuple */[
              param[0],
              param[1]
            ],
            op
          ]);
}

function pending(name) {
  return /* AddExampleOperation */Block.__(2, [
            name,
            (function (_, cb) {
                return Curry._1(cb, /* TestPending */0);
              })
          ]);
}

var Async = /* module */[
  /* **> */$star$star$great,
  /* it */it_w,
  /* describe */describe,
  /* register */register,
  /* beforeEach */beforeEach_w,
  /* pending */pending
];

exports.wrapTest         = wrapTest;
exports.wrapW            = wrapW;
exports.it               = it;
exports.it_a             = it_a;
exports.it_w             = it_w;
exports.describe         = describe;
exports.beforeEach       = beforeEach;
exports.beforeEach_w     = beforeEach_w;
exports.applyOperation   = applyOperation$1;
exports.rootContext      = rootContext;
exports.register         = register;
exports.$star$star$great = $star$star$great;
exports.Async            = Async;
/* Respect_ctx Not a pure module */
