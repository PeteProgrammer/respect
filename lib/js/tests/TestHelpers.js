// Generated by BUCKLESCRIPT VERSION 2.0.0, PLEASE EDIT WITH CARE
'use strict';

var Block         = require("bs-platform/lib/js/block.js");
var Curry         = require("bs-platform/lib/js/curry.js");
var Respect       = require("../src/Respect.js");
var TestContext   = require("../src/TestContext.js");
var Respect_async = require("../src/Respect_async.js");

function passingExampleCode(_, cb) {
  return Curry._1(cb, /* TestSucceeded */1);
}

function failingExample(_, cb) {
  return Curry._1(cb, /* TestFailed */2);
}

function anExampleWithCode(fn) {
  var partial_arg = Respect.Dsl[/* wrapTest */0];
  return /* record */[
          /* name */"dummy",
          /* func */(function (param, param$1) {
              return partial_arg(fn, param, param$1);
            }),
          /* metadata */TestContext.ContextMap[/* empty */0]
        ];
}

var anExampleGroup = Respect.Domain[/* ExampleGroup */0][/* empty */0];

var withAnExample = Respect.Domain[/* ExampleGroup */0][/* addExample */2];

function withExampleCode(f) {
  return Curry._1(withAnExample, anExampleWithCode(f));
}

function withMetadata(param, grp) {
  return /* record */[
          /* name */grp[/* name */0],
          /* children */grp[/* children */1],
          /* setups */grp[/* setups */2],
          /* examples */grp[/* examples */3],
          /* metadata */Curry._3(TestContext.ContextMap[/* add */3], param[0], param[1], grp[/* metadata */4])
        ];
}

function withSetup(code) {
  return Curry._1(Respect.Domain[/* ExampleGroup */0][/* addSetup */3], /* Setup */[code]);
}

function withChildGroup(child, grp) {
  return Curry._2(Respect.Domain[/* ExampleGroup */0][/* addChild */1], child, grp);
}

function withExample(metadata, $staropt$star, $staropt$star$1, grp) {
  var name = $staropt$star ? $staropt$star[0] : "Dummy example";
  var code = $staropt$star$1 ? $staropt$star$1[0] : passingExampleCode;
  var md;
  if (metadata) {
    var match = metadata[0];
    md = Curry._3(TestContext.ContextMap[/* add */3], match[0], match[1], TestContext.ContextMap[/* empty */0]);
  } else {
    md = TestContext.ContextMap[/* empty */0];
  }
  var ex = /* record */[
    /* name */name,
    /* func */code,
    /* metadata */md
  ];
  return Curry._2(Respect.Domain[/* ExampleGroup */0][/* addExample */2], ex, grp);
}

function shouldMatch(fn, don) {
  return Curry._1(fn, (function (err, _) {
                if (err) {
                  return Curry._2(don, /* Some */[err[0]], /* () */0);
                } else {
                  return Curry._2(don, /* None */0, /* () */0);
                }
              }));
}

function shouldNotMatch(fn, don) {
  return Curry._1(fn, (function (err, _) {
                if (err) {
                  return Curry._2(don, /* None */0, /* () */0);
                } else {
                  return Curry._2(don, /* Some */["Expected match error, but none was received"], /* () */0);
                }
              }));
}

var MatchHelper = /* module */[
  /* shouldMatch */shouldMatch,
  /* shouldNotMatch */shouldNotMatch
];

function asyncResolve(actual, cb) {
  var successCb = function (x) {
    return Curry._1(cb, /* MatchSuccess */Block.__(0, [x]));
  };
  var exnCb = function (x) {
    return Curry._1(cb, /* MatchFailure */Block.__(1, [x]));
  };
  return Respect_async.runExn(successCb, exnCb, actual);
}

function asyncThrow(actual, cb) {
  var successCb = function (x) {
    return Curry._1(cb, /* MatchFailure */Block.__(1, [x]));
  };
  var exnCb = function (x) {
    return Curry._1(cb, /* MatchSuccess */Block.__(0, [x]));
  };
  return Respect_async.runExn(successCb, exnCb, actual);
}

var AsyncMatchers = /* module */[
  /* Async */0,
  /* asyncResolve */asyncResolve,
  /* asyncThrow */asyncThrow
];

exports.passingExampleCode = passingExampleCode;
exports.failingExample     = failingExample;
exports.anExampleWithCode  = anExampleWithCode;
exports.anExampleGroup     = anExampleGroup;
exports.withAnExample      = withAnExample;
exports.withExampleCode    = withExampleCode;
exports.withMetadata       = withMetadata;
exports.withSetup          = withSetup;
exports.withChildGroup     = withChildGroup;
exports.withExample        = withExample;
exports.MatchHelper        = MatchHelper;
exports.AsyncMatchers      = AsyncMatchers;
/* Respect Not a pure module */
