// Generated by BUCKLESCRIPT VERSION 2.0.0, PLEASE EDIT WITH CARE
'use strict';

var Block           = require("bs-platform/lib/js/block.js");
var Curry           = require("bs-platform/lib/js/curry.js");
var Respect         = require("../src/Respect.js");
var TestContext     = require("../src/TestContext.js");
var Respect_matcher = require("../src/Respect_matcher.js");

function exec(x) {
  return Respect.Runner[/* run */2](Respect.Dsl[/* applyOperation */8](x, Respect.Domain[/* ExampleGroup */0][/* empty */0]));
}

function beFailure(result) {
  if (result >= 2) {
    return /* MatchSuccess */Block.__(0, [/* () */0]);
  } else {
    return /* MatchFailure */Block.__(1, [/* () */0]);
  }
}

Respect.Dsl[/* register */10](Respect.Dsl[/* describe */5]("TestContext", /* :: */[
          Respect.Dsl[/* describe */5]("Adding data to context", /* :: */[
                Respect.Dsl[/* it_w */4]("Makes the data retrievable", (function () {
                        var ctx = TestContext.create(/* () */0);
                        TestContext.add("key", 42, ctx);
                        var partial_arg = TestContext.get("key", ctx);
                        return (function (param) {
                            return Respect_matcher.shoulda((function (param) {
                                          return Respect_matcher.equal(42, param);
                                        }), partial_arg, param);
                          });
                      })),
                /* [] */0
              ]),
          /* [] */0
        ]));

Respect.Dsl[/* register */10](Respect.Dsl[/* describe */5]("Async tests", /* :: */[
          Respect.Dsl[/* it_a */3]("has an async test", (function (_, cb) {
                  var work = function () {
                    return Curry._1(cb, /* TestSucceeded */1);
                  };
                  setTimeout(work, 10);
                  return /* () */0;
                })),
          /* :: */[
            Respect.Dsl[/* it_w */4]("Implements async match", (function () {
                    var asyncMatcher = function (_, cb) {
                      setTimeout((function () {
                              return Curry._1(cb, /* MatchSuccess */Block.__(0, [/* () */0]));
                            }), 10);
                      return /* () */0;
                    };
                    return (function (param) {
                        return Respect_matcher.shoulda(asyncMatcher, /* () */0, param);
                      });
                  })),
            /* [] */0
          ]
        ]));

exports.exec      = exec;
exports.beFailure = beFailure;
/*  Not a pure module */
