// Generated by BUCKLESCRIPT VERSION 2.1.0, PLEASE EDIT WITH CARE
'use strict';

var Async          = require("re-sync/lib/js/src/Async.js");
var Block          = require("bs-platform/lib/js/block.js");
var Curry          = require("bs-platform/lib/js/curry.js");
var Respect_ctx    = require("../src/Respect_ctx.js");
var Respect_dsl    = require("../src/Respect_dsl.js");
var Respect_domain = require("../src/Respect_domain.js");

function passingExample(onRun, _, ctx, cb) {
  if (onRun) {
    Curry._1(onRun[0], ctx);
  }
  return Curry._1(cb, /* TestSucceeded */1);
}

function failingExample(onRun, _, ctx, cb) {
  if (onRun) {
    Curry._1(onRun[0], ctx);
  }
  return Curry._1(cb, /* TestFailed */2);
}

function pendingExample(onRun, _, ctx, cb) {
  if (onRun) {
    Curry._1(onRun[0], ctx);
  }
  return Curry._1(cb, /* TestPending */0);
}

function anExampleWithCode(fn) {
  return /* record */[
          /* name */"dummy",
          /* func */(function (param, param$1) {
              return Respect_dsl.wrapTest(fn, param, param$1);
            }),
          /* metadata */Respect_ctx.ContextMap[/* empty */0]
        ];
}

var anExampleGroup = Respect_domain.ExampleGroup[/* empty */0];

var withAnExample = Respect_domain.ExampleGroup[/* addExample */2];

function withExampleCode(f) {
  var partial_arg = anExampleWithCode(f);
  return (function (param) {
      return withAnExample(partial_arg, param);
    });
}

function withMetadata(param, grp) {
  return /* record */[
          /* name */grp[/* name */0],
          /* children */grp[/* children */1],
          /* setups */grp[/* setups */2],
          /* examples */grp[/* examples */3],
          /* metadata */Curry._3(Respect_ctx.ContextMap[/* add */3], param[0], param[1], grp[/* metadata */4])
        ];
}

function withSetup(code) {
  var partial_arg = /* Setup */[code];
  var partial_arg$1 = Respect_domain.ExampleGroup[/* addSetup */3];
  return (function (param) {
      return partial_arg$1(partial_arg, param);
    });
}

function withChildGroup(child, grp) {
  return Respect_domain.ExampleGroup[/* addChild */1](child, grp);
}

function withExample(metadata, $staropt$star, $staropt$star$1, grp) {
  var name = $staropt$star ? $staropt$star[0] : "Dummy example";
  var code = $staropt$star$1 ? $staropt$star$1[0] : (function (param, param$1) {
        return passingExample(/* None */0, /* () */0, param, param$1);
      });
  var md;
  if (metadata) {
    var match = metadata[0];
    md = Curry._3(Respect_ctx.ContextMap[/* add */3], match[0], match[1], Respect_ctx.ContextMap[/* empty */0]);
  } else {
    md = Respect_ctx.ContextMap[/* empty */0];
  }
  var ex = /* record */[
    /* name */name,
    /* func */code,
    /* metadata */md
  ];
  return Respect_domain.ExampleGroup[/* addExample */2](ex, grp);
}

function shouldMatch(fn, don) {
  return Curry._1(fn, (function (err, _) {
                if (err) {
                  return Curry._2(don, /* Some */[err[0]], /* () */0);
                } else {
                  return Curry._2(don, /* None */0, /* () */0);
                }
              }));
}

function shouldNotMatch(fn, don) {
  return Curry._1(fn, (function (err, _) {
                if (err) {
                  return Curry._2(don, /* None */0, /* () */0);
                } else {
                  return Curry._2(don, /* Some */["Expected match error, but none was received"], /* () */0);
                }
              }));
}

var MatchHelper = /* module */[
  /* shouldMatch */shouldMatch,
  /* shouldNotMatch */shouldNotMatch
];

function asyncResolve(actual, cb) {
  var successCb = function (x) {
    return Curry._1(cb, /* MatchSuccess */Block.__(0, [x]));
  };
  var exnCb = function (x) {
    return Curry._1(cb, /* MatchFailure */Block.__(1, [
                  x,
                  x
                ]));
  };
  return Async.run(/* Some */[exnCb], successCb, actual);
}

function asyncThrow(actual, cb) {
  var successCb = function (x) {
    return Curry._1(cb, /* MatchFailure */Block.__(1, [
                  x,
                  x
                ]));
  };
  var exnCb = function (x) {
    return Curry._1(cb, /* MatchSuccess */Block.__(0, [x]));
  };
  return Async.run(/* Some */[exnCb], successCb, actual);
}

var AsyncMatchers = /* module */[
  /* asyncResolve */asyncResolve,
  /* asyncThrow */asyncThrow
];

var passingSetup = passingExample;

exports.passingExample    = passingExample;
exports.failingExample    = failingExample;
exports.pendingExample    = pendingExample;
exports.anExampleWithCode = anExampleWithCode;
exports.passingSetup      = passingSetup;
exports.anExampleGroup    = anExampleGroup;
exports.withAnExample     = withAnExample;
exports.withExampleCode   = withExampleCode;
exports.withMetadata      = withMetadata;
exports.withSetup         = withSetup;
exports.withChildGroup    = withChildGroup;
exports.withExample       = withExample;
exports.MatchHelper       = MatchHelper;
exports.AsyncMatchers     = AsyncMatchers;
/* Respect_ctx Not a pure module */
