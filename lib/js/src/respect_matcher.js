// Generated by BUCKLESCRIPT VERSION 1.9.3, PLEASE EDIT WITH CARE
'use strict';

var Block           = require("bs-platform/lib/js/block.js");
var Curry           = require("bs-platform/lib/js/curry.js");
var Caml_obj        = require("bs-platform/lib/js/caml_obj.js");
var Caml_exceptions = require("bs-platform/lib/js/caml_exceptions.js");

var MatchFailedException = Caml_exceptions.create("Respect_matcher.MatchFailedException");

function $great$eq$great(a, b) {
  return (function (x) {
      var match = Curry._1(a, x);
      if (match.tag) {
        var x$1 = match[0];
        return /* AsyncMatchResult */Block.__(1, [(function (cb) {
                      return Curry._1(x$1, (function (firstResult) {
                                    if (firstResult.tag) {
                                      return Curry._1(cb, /* MatchFailure */Block.__(1, [firstResult[0]]));
                                    } else {
                                      var match = Curry._1(b, firstResult[0]);
                                      if (match.tag) {
                                        return Curry._1(match[0], cb);
                                      } else {
                                        return Curry._1(cb, match[0]);
                                      }
                                    }
                                  }));
                    })]);
      } else {
        var match$1 = match[0];
        if (match$1.tag) {
          return /* SyncMatchResult */Block.__(0, [/* MatchFailure */Block.__(1, [match$1[0]])]);
        } else {
          return Curry._1(b, match$1[0]);
        }
      }
    });
}

function equal(expected, actual) {
  var match = Caml_obj.caml_equal(actual, expected);
  return /* SyncMatchResult */Block.__(0, [match !== 0 ? /* MatchSuccess */Block.__(0, [actual]) : /* MatchFailure */Block.__(1, [expected])]);
}

function should(matcher, actual) {
  var match = Curry._1(matcher, actual);
  if (match.tag) {
    throw [
          MatchFailedException,
          "Cannot run async matcher synchronousely"
        ];
  } else {
    var result = match[0];
    if (result.tag) {
      console.log("Match failed");
      console.log(/* tuple */[
            "Expected: ",
            result[0]
          ]);
      console.log(/* tuple */[
            "Actual: ",
            actual
          ]);
      throw [
            MatchFailedException,
            "Match failed"
          ];
    } else {
      return /* () */0;
    }
  }
}

function shoulda(matcher, actual, don) {
  var handleMatch = function (result) {
    if (result.tag) {
      console.log("Match failed");
      console.log(/* tuple */[
            "Expected: ",
            result[0]
          ]);
      console.log(/* tuple */[
            "Actual: ",
            actual
          ]);
      return Curry._2(don, /* Some */["match failed"], /* () */0);
    } else {
      return Curry._2(don, /* None */0, /* () */0);
    }
  };
  var match = Curry._1(matcher, actual);
  if (match.tag) {
    return Curry._1(match[0], handleMatch);
  } else {
    return handleMatch(match[0]);
  }
}

exports.MatchFailedException = MatchFailedException;
exports.$great$eq$great      = $great$eq$great;
exports.equal                = equal;
exports.should               = should;
exports.shoulda              = shoulda;
/* No side effect */
