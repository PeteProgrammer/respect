// Generated by BUCKLESCRIPT VERSION 2.1.0, PLEASE EDIT WITH CARE
'use strict';

var List            = require("bs-platform/lib/js/list.js");
var Curry           = require("bs-platform/lib/js/curry.js");
var Respect         = require("../src/Respect.js");
var Respect_ctx     = require("../src/Respect_ctx.js");
var Respect_matcher = require("../src/Respect_matcher.js");

function dummy() {
  return /* () */0;
}

function parse(op) {
  return List.hd(Respect.Dsl[/* applyOperation */8](op, Respect.Domain[/* ExampleGroup */0][/* empty */0])[/* children */1]);
}

Respect.Dsl[/* register */10](Respect.Dsl[/* describe */5]("Dsl", /* :: */[
          Respect.Dsl[/* it */2]("Example has a setup", (function () {
                  var grp = parse(Respect.Dsl[/* describe */5]("Group", /* :: */[
                            Respect.Dsl[/* beforeEach */6](dummy),
                            /* [] */0
                          ]));
                  return Respect_matcher.should((function (param) {
                                return Respect_matcher.equal(1, param);
                              }), List.length(grp[/* setups */2]));
                })),
          /* :: */[
            Respect.Dsl[/* it */2]("Example group has metadata", (function () {
                    var grp = parse(Respect.Dsl[/* **> */11](/* tuple */[
                              "name",
                              "value"
                            ], Respect.Dsl[/* describe */5]("Group", /* :: */[
                                  Respect.Dsl[/* beforeEach */6](dummy),
                                  /* [] */0
                                ])));
                    var expected = Curry._3(Respect_ctx.ContextMap[/* add */3], "name", "value", Respect_ctx.ContextMap[/* empty */0]);
                    return Respect_matcher.should((function (param) {
                                  return Respect_matcher.equal(expected, param);
                                }), grp[/* metadata */4]);
                  })),
            /* :: */[
              Respect.Dsl[/* it */2]("Example has metadata", (function () {
                      var grp = parse(Respect.Dsl[/* describe */5]("Group", /* :: */[
                                Respect.Dsl[/* **> */11](/* tuple */[
                                      "name",
                                      "value"
                                    ], Respect.Dsl[/* it */2]("has example", (function () {
                                            return /* () */0;
                                          }))),
                                /* [] */0
                              ]));
                      var expected = Curry._3(Respect_ctx.ContextMap[/* add */3], "name", "value", Respect_ctx.ContextMap[/* empty */0]);
                      return Respect_matcher.should((function (param) {
                                    return Respect_matcher.equal(expected, param);
                                  }), List.hd(grp[/* examples */3])[/* metadata */2]);
                    })),
              /* :: */[
                Respect.Dsl[/* it */2]("Example group has metadata", (function () {
                        var grp = parse(Respect.Dsl[/* **> */11](/* tuple */[
                                  "name",
                                  "value"
                                ], Respect.Dsl[/* describe */5]("Group", /* :: */[
                                      Respect.Dsl[/* beforeEach */6](dummy),
                                      /* [] */0
                                    ])));
                        var expected = Curry._3(Respect_ctx.ContextMap[/* add */3], "name", "value", Respect_ctx.ContextMap[/* empty */0]);
                        return Respect_matcher.should((function (param) {
                                      return Respect_matcher.equal(expected, param);
                                    }), grp[/* metadata */4]);
                      })),
                /* [] */0
              ]
            ]
          ]
        ]));

exports.dummy = dummy;
exports.parse = parse;
/*  Not a pure module */
