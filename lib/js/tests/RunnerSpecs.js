// Generated by BUCKLESCRIPT VERSION 2.1.0, PLEASE EDIT WITH CARE
'use strict';

var Curry           = require("bs-platform/lib/js/curry.js");
var Respect         = require("../src/Respect.js");
var Pervasives      = require("bs-platform/lib/js/pervasives.js");
var TestContext     = require("../src/TestContext.js");
var TestHelpers     = require("./TestHelpers.js");
var Respect_async   = require("../src/Respect_async.js");
var Caml_exceptions = require("bs-platform/lib/js/caml_exceptions.js");
var Respect_matcher = require("../src/Respect_matcher.js");

var MockFailure = Caml_exceptions.create("RunnerSpecs.MockFailure");

function $great$great$pipe(x, f) {
  return (function (param) {
      return Respect_async.map(f, x, param);
    });
}

Curry._1(Respect.Dsl[/* Async */12][/* register */3], Curry._2(Respect.Dsl[/* Async */12][/* describe */2], "Runner", /* :: */[
          Curry._2(Respect.Dsl[/* Async */12][/* describe */2], "Test Result", /* :: */[
                Curry._2(Respect.Dsl[/* Async */12][/* it */1], "Is success when all tests succeed", (function () {
                        var arg = /* Some */[(function (param, param$1) {
                              return TestHelpers.passingExample(/* None */0, /* () */0, param, param$1);
                            })];
                        var arg$1 = /* Some */[(function (param, param$1) {
                              return TestHelpers.passingExample(/* None */0, /* () */0, param, param$1);
                            })];
                        var ex = (function (eta) {
                              return TestHelpers.withExample(/* None */0, /* None */0, arg, eta);
                            })((function (eta) {
                                  return TestHelpers.withExample(/* None */0, /* None */0, arg$1, eta);
                                })(TestHelpers.anExampleGroup));
                        var partial_arg = Respect.Runner[/* run */2](ex);
                        var partial_arg$1 = TestHelpers.AsyncMatchers[/* asyncResolve */1];
                        var partial_arg$2 = function (param, param$1) {
                          return Respect_matcher.$great$eq$great(partial_arg$1, (function (param) {
                                        return Respect_matcher.equal(/* TestSucceeded */1, param);
                                      }), param, param$1);
                        };
                        return (function (param) {
                            return Respect_matcher.shoulda(partial_arg$2, partial_arg, param);
                          });
                      })),
                /* :: */[
                  Curry._2(Respect.Dsl[/* Async */12][/* it */1], "Is pending when one test is pending", (function () {
                          var arg = /* Some */[(function (param, param$1) {
                                return TestHelpers.pendingExample(/* None */0, /* () */0, param, param$1);
                              })];
                          var arg$1 = /* Some */[(function (param, param$1) {
                                return TestHelpers.passingExample(/* None */0, /* () */0, param, param$1);
                              })];
                          var ex = (function (eta) {
                                return TestHelpers.withExample(/* None */0, /* None */0, arg, eta);
                              })((function (eta) {
                                    return TestHelpers.withExample(/* None */0, /* None */0, arg$1, eta);
                                  })(TestHelpers.anExampleGroup));
                          var partial_arg = Respect.Runner[/* run */2](ex);
                          var partial_arg$1 = TestHelpers.AsyncMatchers[/* asyncResolve */1];
                          var partial_arg$2 = function (param, param$1) {
                            return Respect_matcher.$great$eq$great(partial_arg$1, (function (param) {
                                          return Respect_matcher.equal(/* TestPending */0, param);
                                        }), param, param$1);
                          };
                          return (function (param) {
                              return Respect_matcher.shoulda(partial_arg$2, partial_arg, param);
                            });
                        })),
                  /* :: */[
                    Curry._2(Respect.Dsl[/* Async */12][/* it */1], "Is a failure when one test is pending", (function () {
                            var arg = /* Some */[(function (param, param$1) {
                                  return TestHelpers.failingExample(/* None */0, /* () */0, param, param$1);
                                })];
                            var arg$1 = /* Some */[(function (param, param$1) {
                                  return TestHelpers.pendingExample(/* None */0, /* () */0, param, param$1);
                                })];
                            var arg$2 = /* Some */[(function (param, param$1) {
                                  return TestHelpers.passingExample(/* None */0, /* () */0, param, param$1);
                                })];
                            var ex = (function (eta) {
                                  return TestHelpers.withExample(/* None */0, /* None */0, arg, eta);
                                })((function (eta) {
                                      return TestHelpers.withExample(/* None */0, /* None */0, arg$1, eta);
                                    })((function (eta) {
                                          return TestHelpers.withExample(/* None */0, /* None */0, arg$2, eta);
                                        })(TestHelpers.anExampleGroup)));
                            var partial_arg = Respect.Runner[/* run */2](ex);
                            var partial_arg$1 = TestHelpers.AsyncMatchers[/* asyncResolve */1];
                            var partial_arg$2 = function (param, param$1) {
                              return Respect_matcher.$great$eq$great(partial_arg$1, (function (param) {
                                            return Respect_matcher.equal(/* TestFailed */2, param);
                                          }), param, param$1);
                            };
                            return (function (param) {
                                return Respect_matcher.shoulda(partial_arg$2, partial_arg, param);
                              });
                          })),
                    /* [] */0
                  ]
                ]
              ]),
          /* :: */[
            Curry._2(Respect.Dsl[/* Async */12][/* describe */2], "Group has a setup", /* :: */[
                  Curry._2(Respect.Dsl[/* Async */12][/* it */1], "Doesn't execute example code when setup code fails", (function () {
                          var lines = [/* [] */0];
                          var append = function (line) {
                            lines[0] = Pervasives.$at(lines[0], /* :: */[
                                  line,
                                  /* [] */0
                                ]);
                            return /* () */0;
                          };
                          var eta = Curry._1(TestHelpers.withSetup((function (_, cb) {
                                      append("setup");
                                      return Curry._1(cb, /* TestFailed */2);
                                    })), TestHelpers.anExampleGroup);
                          var arg = /* Some */[(function (_, cb) {
                                append("test");
                                return Curry._1(cb, /* TestSucceeded */1);
                              })];
                          var ex = Curry._1((function (param, param$1) {
                                    return (function (param$2) {
                                        return TestHelpers.withExample(param, param$1, arg, param$2);
                                      });
                                  })(/* None */0, /* None */0), eta);
                          var x = Respect.Runner[/* run */2](ex);
                          var partial_arg = function (param) {
                            return Respect_async.map((function () {
                                          return lines[0];
                                        }), x, param);
                          };
                          var partial_arg$1 = /* :: */[
                            "setup",
                            /* [] */0
                          ];
                          var partial_arg$2 = function (param) {
                            return Respect_matcher.equal(partial_arg$1, param);
                          };
                          var partial_arg$3 = TestHelpers.AsyncMatchers[/* asyncResolve */1];
                          var partial_arg$4 = function (param, param$1) {
                            return Respect_matcher.$great$eq$great(partial_arg$3, partial_arg$2, param, param$1);
                          };
                          return (function (param) {
                              return Respect_matcher.shoulda(partial_arg$4, partial_arg, param);
                            });
                        })),
                  /* :: */[
                    Curry._2(Respect.Dsl[/* Async */12][/* it */1], "Executes multiple setups before the example", (function () {
                            var lines = [/* [] */0];
                            var append = function (line, _) {
                              lines[0] = Pervasives.$at(lines[0], /* :: */[
                                    line,
                                    /* [] */0
                                  ]);
                              return /* () */0;
                            };
                            var partial_arg = /* Some */[(function (param) {
                                  return append("test", param);
                                })];
                            var arg = /* Some */[(function (param, param$1) {
                                  return TestHelpers.passingExample(partial_arg, /* () */0, param, param$1);
                                })];
                            var partial_arg$1 = /* Some */[(function (param) {
                                  return append("setup 2", param);
                                })];
                            var partial_arg$2 = /* Some */[(function (param) {
                                  return append("setup 1", param);
                                })];
                            var ex = (function (eta) {
                                  return TestHelpers.withExample(/* None */0, /* None */0, arg, eta);
                                })(Curry._1(TestHelpers.withSetup((function (param, param$1) {
                                            return TestHelpers.passingSetup(partial_arg$1, /* () */0, param, param$1);
                                          })), Curry._1(TestHelpers.withSetup((function (param, param$1) {
                                                return TestHelpers.passingSetup(partial_arg$2, /* () */0, param, param$1);
                                              })), TestHelpers.anExampleGroup)));
                            var x = Respect.Runner[/* run */2](ex);
                            var partial_arg$3 = function (param) {
                              return Respect_async.map((function () {
                                            return lines[0];
                                          }), x, param);
                            };
                            var partial_arg$4 = TestHelpers.AsyncMatchers[/* asyncResolve */1];
                            var partial_arg$5 = function (param, param$1) {
                              return Respect_matcher.$great$eq$great(partial_arg$4, (function (param) {
                                            return Respect_matcher.equal(/* :: */[
                                                        "setup 1",
                                                        /* :: */[
                                                          "setup 2",
                                                          /* :: */[
                                                            "test",
                                                            /* [] */0
                                                          ]
                                                        ]
                                                      ], param);
                                          }), param, param$1);
                            };
                            return (function (param) {
                                return Respect_matcher.shoulda(partial_arg$5, partial_arg$3, param);
                              });
                          })),
                    /* :: */[
                      Curry._2(Respect.Dsl[/* Async */12][/* it */1], "Executes the setup code before the example", (function () {
                              var lines = [/* [] */0];
                              var append = function (line, _) {
                                lines[0] = Pervasives.$at(lines[0], /* :: */[
                                      line,
                                      /* [] */0
                                    ]);
                                return /* () */0;
                              };
                              var partial_arg = /* Some */[(function (param) {
                                    return append("test", param);
                                  })];
                              var arg = /* Some */[(function (param, param$1) {
                                    return TestHelpers.passingExample(partial_arg, /* () */0, param, param$1);
                                  })];
                              var partial_arg$1 = /* Some */[(function (param) {
                                    return append("setup", param);
                                  })];
                              var ex = (function (eta) {
                                    return TestHelpers.withExample(/* None */0, /* None */0, arg, eta);
                                  })(Curry._1(TestHelpers.withSetup((function (param, param$1) {
                                              return TestHelpers.passingSetup(partial_arg$1, /* () */0, param, param$1);
                                            })), TestHelpers.anExampleGroup));
                              var x = Respect.Runner[/* run */2](ex);
                              var partial_arg$2 = function (param) {
                                return Respect_async.map((function () {
                                              return lines[0];
                                            }), x, param);
                              };
                              var partial_arg$3 = /* :: */[
                                "setup",
                                /* :: */[
                                  "test",
                                  /* [] */0
                                ]
                              ];
                              var partial_arg$4 = function (param) {
                                return Respect_matcher.equal(partial_arg$3, param);
                              };
                              var partial_arg$5 = TestHelpers.AsyncMatchers[/* asyncResolve */1];
                              var partial_arg$6 = function (param, param$1) {
                                return Respect_matcher.$great$eq$great(partial_arg$5, partial_arg$4, param, param$1);
                              };
                              return (function (param) {
                                  return Respect_matcher.shoulda(partial_arg$6, partial_arg$2, param);
                                });
                            })),
                      /* :: */[
                        Curry._2(Respect.Dsl[/* Async */12][/* describe */2], "Group has two examples", /* :: */[
                              Curry._2(Respect.Dsl[/* Async */12][/* it */1], "Runs the setup before each example", (function () {
                                      var lines = [/* [] */0];
                                      var append = function (line, _) {
                                        lines[0] = Pervasives.$at(lines[0], /* :: */[
                                              line,
                                              /* [] */0
                                            ]);
                                        return /* () */0;
                                      };
                                      var partial_arg = /* Some */[(function (param) {
                                            return append("test 2", param);
                                          })];
                                      var arg = /* Some */[(function (param, param$1) {
                                            return TestHelpers.passingExample(partial_arg, /* () */0, param, param$1);
                                          })];
                                      var partial_arg$1 = /* Some */[(function (param) {
                                            return append("test 1", param);
                                          })];
                                      var arg$1 = /* Some */[(function (param, param$1) {
                                            return TestHelpers.passingExample(partial_arg$1, /* () */0, param, param$1);
                                          })];
                                      var partial_arg$2 = /* Some */[(function (param) {
                                            return append("setup", param);
                                          })];
                                      var ex = (function (eta) {
                                            return TestHelpers.withExample(/* None */0, /* None */0, arg, eta);
                                          })((function (eta) {
                                                return TestHelpers.withExample(/* None */0, /* None */0, arg$1, eta);
                                              })(Curry._1(TestHelpers.withSetup((function (param, param$1) {
                                                          return TestHelpers.passingSetup(partial_arg$2, /* () */0, param, param$1);
                                                        })), TestHelpers.anExampleGroup)));
                                      var x = Respect.Runner[/* run */2](ex);
                                      var partial_arg$3 = function (param) {
                                        return Respect_async.map((function () {
                                                      return lines[0];
                                                    }), x, param);
                                      };
                                      var partial_arg$4 = TestHelpers.AsyncMatchers[/* asyncResolve */1];
                                      var partial_arg$5 = function (param, param$1) {
                                        return Respect_matcher.$great$eq$great(partial_arg$4, (function (param) {
                                                      return Respect_matcher.equal(/* :: */[
                                                                  "setup",
                                                                  /* :: */[
                                                                    "test 1",
                                                                    /* :: */[
                                                                      "setup",
                                                                      /* :: */[
                                                                        "test 2",
                                                                        /* [] */0
                                                                      ]
                                                                    ]
                                                                  ]
                                                                ], param);
                                                    }), param, param$1);
                                      };
                                      return (function (param) {
                                          return Respect_matcher.shoulda(partial_arg$5, partial_arg$3, param);
                                        });
                                    })),
                              /* [] */0
                            ]),
                        /* :: */[
                          Curry._2(Respect.Dsl[/* Async */12][/* describe */2], "Nested groups", /* :: */[
                                Curry._2(Respect.Dsl[/* Async */12][/* it */1], "Runs the setups from outermost to innermost group", (function () {
                                        var lines = [/* [] */0];
                                        var append = function (line, _) {
                                          lines[0] = Pervasives.$at(lines[0], /* :: */[
                                                line,
                                                /* [] */0
                                              ]);
                                          return /* () */0;
                                        };
                                        var partial_arg = /* Some */[(function (param) {
                                              return append("inner test", param);
                                            })];
                                        var arg = /* Some */[(function (param, param$1) {
                                              return TestHelpers.passingExample(partial_arg, /* () */0, param, param$1);
                                            })];
                                        var partial_arg$1 = /* Some */[(function (param) {
                                              return append("inner setup", param);
                                            })];
                                        var innerGroup = (function (eta) {
                                              return TestHelpers.withExample(/* None */0, /* None */0, arg, eta);
                                            })(Curry._1(TestHelpers.withSetup((function (param, param$1) {
                                                        return TestHelpers.passingSetup(partial_arg$1, /* () */0, param, param$1);
                                                      })), TestHelpers.anExampleGroup));
                                        var partial_arg$2 = /* Some */[(function (param) {
                                              return append("outer test", param);
                                            })];
                                        var arg$1 = /* Some */[(function (param, param$1) {
                                              return TestHelpers.passingExample(partial_arg$2, /* () */0, param, param$1);
                                            })];
                                        var partial_arg$3 = /* Some */[(function (param) {
                                              return append("outer setup", param);
                                            })];
                                        var outerGroup = TestHelpers.withChildGroup(innerGroup, (function (eta) {
                                                  return TestHelpers.withExample(/* None */0, /* None */0, arg$1, eta);
                                                })(Curry._1(TestHelpers.withSetup((function (param, param$1) {
                                                            return TestHelpers.passingSetup(partial_arg$3, /* () */0, param, param$1);
                                                          })), TestHelpers.anExampleGroup)));
                                        var x = Respect.Runner[/* run */2](outerGroup);
                                        var partial_arg$4 = function (param) {
                                          return Respect_async.map((function () {
                                                        return lines[0];
                                                      }), x, param);
                                        };
                                        var partial_arg$5 = TestHelpers.AsyncMatchers[/* asyncResolve */1];
                                        var partial_arg$6 = function (param, param$1) {
                                          return Respect_matcher.$great$eq$great(partial_arg$5, (function (param) {
                                                        return Respect_matcher.equal(/* :: */[
                                                                    "outer setup",
                                                                    /* :: */[
                                                                      "outer test",
                                                                      /* :: */[
                                                                        "outer setup",
                                                                        /* :: */[
                                                                          "inner setup",
                                                                          /* :: */[
                                                                            "inner test",
                                                                            /* [] */0
                                                                          ]
                                                                        ]
                                                                      ]
                                                                    ]
                                                                  ], param);
                                                      }), param, param$1);
                                        };
                                        return (function (param) {
                                            return Respect_matcher.shoulda(partial_arg$6, partial_arg$4, param);
                                          });
                                      })),
                                /* [] */0
                              ]),
                          /* [] */0
                        ]
                      ]
                    ]
                  ]
                ]),
            /* :: */[
              Curry._2(Respect.Dsl[/* Async */12][/* describe */2], "ExampleGroup has metadata", /* :: */[
                    Curry._2(Respect.Dsl[/* Async */12][/* it */1], "Initializes the metadata on the test context", (function () {
                            var data = [""];
                            var partial_arg = /* Some */[(function (ctx) {
                                  data[0] = TestContext.get("data", ctx);
                                  return /* () */0;
                                })];
                            var arg = /* Some */[(function (param, param$1) {
                                  return TestHelpers.passingExample(partial_arg, /* () */0, param, param$1);
                                })];
                            var grp = (function (eta) {
                                  return TestHelpers.withExample(/* None */0, /* None */0, arg, eta);
                                })(TestHelpers.withMetadata(/* tuple */[
                                      "data",
                                      "value"
                                    ], TestHelpers.anExampleGroup));
                            var x = Respect.Runner[/* run */2](grp);
                            var partial_arg$1 = function (param) {
                              return Respect_async.map((function () {
                                            return data[0];
                                          }), x, param);
                            };
                            var partial_arg$2 = TestHelpers.AsyncMatchers[/* asyncResolve */1];
                            var partial_arg$3 = function (param, param$1) {
                              return Respect_matcher.$great$eq$great(partial_arg$2, (function (param) {
                                            return Respect_matcher.equal("value", param);
                                          }), param, param$1);
                            };
                            return (function (param) {
                                return Respect_matcher.shoulda(partial_arg$3, partial_arg$1, param);
                              });
                          })),
                    /* [] */0
                  ]),
              /* :: */[
                Curry._2(Respect.Dsl[/* Async */12][/* describe */2], "Parent group has metadata", /* :: */[
                      Curry._2(Respect.Dsl[/* Async */12][/* it */1], "uses the metadata closest to the example", (function () {
                              var lines = [/* [] */0];
                              var append = function (line) {
                                lines[0] = Pervasives.$at(lines[0], /* :: */[
                                      line,
                                      /* [] */0
                                    ]);
                                return /* () */0;
                              };
                              var partial_arg = /* Some */[(function (ctx) {
                                    append(TestContext.get("data1", ctx));
                                    append(TestContext.get("data2", ctx));
                                    return append(TestContext.get("data3", ctx));
                                  })];
                              var arg = /* Some */[(function (param, param$1) {
                                    return TestHelpers.passingExample(partial_arg, /* () */0, param, param$1);
                                  })];
                              var arg$1 = function (param) {
                                return Curry._3(TestHelpers.withExample, /* Some */[/* tuple */[
                                              "data3",
                                              "test"
                                            ]], param, arg);
                              };
                              var innerGroup = (function (eta) {
                                    return Curry._1(arg$1(/* None */0), eta);
                                  })(TestHelpers.withMetadata(/* tuple */[
                                        "data3",
                                        "inner"
                                      ], TestHelpers.withMetadata(/* tuple */[
                                            "data2",
                                            "inner"
                                          ], TestHelpers.anExampleGroup)));
                              var outerGroup = TestHelpers.withChildGroup(innerGroup, TestHelpers.withMetadata(/* tuple */[
                                        "data3",
                                        "outer"
                                      ], TestHelpers.withMetadata(/* tuple */[
                                            "data2",
                                            "outer"
                                          ], TestHelpers.withMetadata(/* tuple */[
                                                "data1",
                                                "outer"
                                              ], TestHelpers.anExampleGroup))));
                              var x = Respect.Runner[/* run */2](outerGroup);
                              var partial_arg$1 = function (param) {
                                return Respect_async.map((function () {
                                              return lines[0];
                                            }), x, param);
                              };
                              var partial_arg$2 = /* :: */[
                                "outer",
                                /* :: */[
                                  "inner",
                                  /* :: */[
                                    "test",
                                    /* [] */0
                                  ]
                                ]
                              ];
                              var partial_arg$3 = function (param) {
                                return Respect_matcher.equal(partial_arg$2, param);
                              };
                              var partial_arg$4 = TestHelpers.AsyncMatchers[/* asyncResolve */1];
                              var partial_arg$5 = function (param, param$1) {
                                return Respect_matcher.$great$eq$great(partial_arg$4, partial_arg$3, param, param$1);
                              };
                              return (function (param) {
                                  return Respect_matcher.shoulda(partial_arg$5, partial_arg$1, param);
                                });
                            })),
                      /* [] */0
                    ]),
                /* :: */[
                  Curry._2(Respect.Dsl[/* Async */12][/* describe */2], "example throws an exception", /* :: */[
                        Curry._2(Respect.Dsl[/* Async */12][/* it */1], "returns an error message", (function () {
                                var ex = Curry._1(TestHelpers.withExampleCode((function () {
                                            throw [
                                                  MockFailure,
                                                  ""
                                                ];
                                          })), TestHelpers.anExampleGroup);
                                var partial_arg = Respect.Runner[/* run */2](ex);
                                var partial_arg$1 = TestHelpers.AsyncMatchers[/* asyncResolve */1];
                                var partial_arg$2 = function (param, param$1) {
                                  return Respect_matcher.$great$eq$great(partial_arg$1, (function (param) {
                                                return Respect_matcher.equal(/* TestFailed */2, param);
                                              }), param, param$1);
                                };
                                return (function (param) {
                                    return Respect_matcher.shoulda(partial_arg$2, partial_arg, param);
                                  });
                              })),
                        /* [] */0
                      ]),
                  /* :: */[
                    Curry._2(Respect.Dsl[/* Async */12][/* it */1], "executes the example code", (function () {
                            var lines = [/* [] */0];
                            var ex = Curry._1(TestHelpers.withExampleCode((function () {
                                        var line = "x";
                                        lines[0] = /* :: */[
                                          line,
                                          lines[0]
                                        ];
                                        return /* () */0;
                                      })), TestHelpers.anExampleGroup);
                            var x = Respect.Runner[/* run */2](ex);
                            var partial_arg = function (param) {
                              return Respect_async.map((function () {
                                            return lines[0];
                                          }), x, param);
                            };
                            var partial_arg$1 = /* :: */[
                              "x",
                              /* [] */0
                            ];
                            var partial_arg$2 = function (param) {
                              return Respect_matcher.equal(partial_arg$1, param);
                            };
                            var partial_arg$3 = TestHelpers.AsyncMatchers[/* asyncResolve */1];
                            var partial_arg$4 = function (param, param$1) {
                              return Respect_matcher.$great$eq$great(partial_arg$3, partial_arg$2, param, param$1);
                            };
                            return (function (param) {
                                return Respect_matcher.shoulda(partial_arg$4, partial_arg, param);
                              });
                          })),
                    /* [] */0
                  ]
                ]
              ]
            ]
          ]
        ]));

var As = 0;

var Ctx = 0;

exports.As                = As;
exports.Ctx               = Ctx;
exports.MockFailure       = MockFailure;
exports.$great$great$pipe = $great$great$pipe;
/*  Not a pure module */
