// Generated by BUCKLESCRIPT VERSION 2.2.0, PLEASE EDIT WITH CARE
'use strict';

var Async = require("@stroiman/async/lib/js/src/Async.js");
var Block = require("bs-platform/lib/js/block.js");
var Curry = require("bs-platform/lib/js/curry.js");
var Caml_obj = require("bs-platform/lib/js/caml_obj.js");
var Caml_oo_curry = require("bs-platform/lib/js/caml_oo_curry.js");
var CamlinternalOO = require("bs-platform/lib/js/camlinternalOO.js");

function createCallback(don, param) {
  if (param.tag) {
    return Curry._2(don, /* Some */["Match error"], /* () */0);
  } else {
    return Curry._2(don, /* None */0, /* () */0);
  }
}

var class_tables = [
  0,
  0,
  0
];

function expect(actual) {
  if (!class_tables[0]) {
    var $$class = CamlinternalOO.create_table(["to_"]);
    var env = CamlinternalOO.new_variable($$class, "");
    var ids = CamlinternalOO.get_method_labels($$class, [
          "to_",
          "actual"
        ]);
    var to_ = ids[0];
    var actual$1 = ids[1];
    CamlinternalOO.set_methods($$class, /* array */[
          actual$1,
          (function (self$1) {
              return self$1[env][0];
            }),
          to_,
          (function (self$1, matcher, don) {
              return Async.run(/* Some */[(function () {
                              return Curry._2(don, /* Some */["Exception occurred"], /* () */0);
                            })], (function (param) {
                            return createCallback(don, param);
                          }), Caml_oo_curry.js2(102, 2, matcher, Curry._1(self$1[0][actual$1], self$1)));
            })
        ]);
    var env_init = function (env$1) {
      var self = CamlinternalOO.create_object_opt(0, $$class);
      self[env] = env$1;
      return self;
    };
    CamlinternalOO.init_class($$class);
    class_tables[0] = env_init;
  }
  return Curry._1(class_tables[0], [actual]);
}

var class_tables$1 = [
  0,
  0,
  0
];

function equal(expected) {
  if (!class_tables$1[0]) {
    var $$class = CamlinternalOO.create_table(["f"]);
    var env = CamlinternalOO.new_variable($$class, "");
    var ids = CamlinternalOO.get_method_labels($$class, [
          "f",
          "expected"
        ]);
    var f = ids[0];
    var expected$1 = ids[1];
    CamlinternalOO.set_methods($$class, /* array */[
          expected$1,
          (function (self$2) {
              return self$2[env][0];
            }),
          f,
          (function (self$2, actual) {
              if (Caml_obj.caml_equal(actual, Curry._1(self$2[0][expected$1], self$2))) {
                var partial_arg = /* MatchSuccess */Block.__(0, [actual]);
                return (function (param) {
                    return Async.$$return(partial_arg, param);
                  });
              } else {
                var partial_arg$1 = /* MatchFailure */Block.__(1, [actual]);
                return (function (param) {
                    return Async.$$return(partial_arg$1, param);
                  });
              }
            })
        ]);
    var env_init = function (env$1) {
      var self = CamlinternalOO.create_object_opt(0, $$class);
      self[env] = env$1;
      return self;
    };
    CamlinternalOO.init_class($$class);
    class_tables$1[0] = env_init;
  }
  return Curry._1(class_tables$1[0], [expected]);
}

exports.createCallback = createCallback;
exports.expect = expect;
exports.equal = equal;
/* No side effect */
