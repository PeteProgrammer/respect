// Generated by BUCKLESCRIPT VERSION 2.0.0, PLEASE EDIT WITH CARE
'use strict';

var Block           = require("bs-platform/lib/js/block.js");
var Curry           = require("bs-platform/lib/js/curry.js");
var Respect         = require("../src/Respect.js");
var TestContext     = require("../src/TestContext.js");
var Caml_oo_curry   = require("bs-platform/lib/js/caml_oo_curry.js");
var Respect_matcher = require("../src/Respect_matcher.js");

function beFailure(result) {
  if (result >= 2) {
    return /* MatchSuccess */Block.__(0, [/* () */0]);
  } else {
    return /* MatchFailure */Block.__(1, [
              /* () */0,
              /* () */0
            ]);
  }
}

function create() {
  return TestContext.create(TestContext.ContextMap[/* empty */0]);
}

Curry._1(Respect.Dsl[/* Async */12][/* register */3], Curry._2(Respect.Dsl[/* Async */12][/* describe */2], "TestContext", /* :: */[
          Curry._2(Respect.Dsl[/* Async */12][/* describe */2], "Get/set data to context", /* :: */[
                Curry._2(Respect.Dsl[/* Async */12][/* it */1], "Data added to context is retrievable", (function () {
                        var ctx = TestContext.create(TestContext.ContextMap[/* empty */0]);
                        var tmp = Caml_oo_curry.js3(4846113, 1, ctx, "key", 42);
                        var partial_arg = Caml_oo_curry.js2(5144726, 2, tmp, "key");
                        return (function (param) {
                            return Respect_matcher.shoulda((function (param) {
                                          return Respect_matcher.equal(42, param);
                                        }), partial_arg, param);
                          });
                      })),
                /* :: */[
                  Curry._2(Respect.Dsl[/* Async */12][/* it */1], "Data new values overwrite old values", (function () {
                          var ctx = TestContext.create(TestContext.ContextMap[/* empty */0]);
                          var ctx$1 = Caml_oo_curry.js3(4846113, 3, ctx, "key2", 42);
                          var tmp = Caml_oo_curry.js3(4846113, 4, ctx$1, "key", 43);
                          var partial_arg = Caml_oo_curry.js2(5144726, 5, tmp, "key");
                          return (function (param) {
                              return Respect_matcher.shoulda((function (param) {
                                            return Respect_matcher.equal(43, param);
                                          }), partial_arg, param);
                            });
                        })),
                  /* :: */[
                    Curry._2(Respect.Dsl[/* Async */12][/* it */1], "Subjec to change!!! Context is mutated", (function () {
                            var ctx = TestContext.create(TestContext.ContextMap[/* empty */0]);
                            var tmp = Caml_oo_curry.js3(4846113, 6, ctx, "key", 42);
                            var partial_arg = Caml_oo_curry.js2(5144726, 7, tmp, "key");
                            return (function (param) {
                                return Respect_matcher.shoulda((function (param) {
                                              return Respect_matcher.equal(42, param);
                                            }), partial_arg, param);
                              });
                          })),
                    /* [] */0
                  ]
                ]
              ]),
          /* :: */[
            Curry._2(Respect.Dsl[/* Async */12][/* describe */2], "Access with piping", /* :: */[
                  Curry._2(Respect.Dsl[/* Async */12][/* it */1], "Can be piped", (function () {
                          var partial_arg = TestContext.get("key", TestContext.add("key", 43, TestContext.add("key", 42, TestContext.create(TestContext.ContextMap[/* empty */0]))));
                          return (function (param) {
                              return Respect_matcher.shoulda((function (param) {
                                            return Respect_matcher.equal(43, param);
                                          }), partial_arg, param);
                            });
                        })),
                  /* [] */0
                ]),
            /* [] */0
          ]
        ]));

var Ctx = 0;

exports.Ctx       = Ctx;
exports.beFailure = beFailure;
exports.create    = create;
/*  Not a pure module */
