// Generated by BUCKLESCRIPT VERSION 2.2.0, PLEASE EDIT WITH CARE
'use strict';

var List = require("bs-platform/lib/js/list.js");
var Curry = require("bs-platform/lib/js/curry.js");
var Respect_ctx = require("../src/Respect_ctx.js");
var Respect_dsl = require("../src/Respect_dsl.js");
var Respect_domain = require("../src/Respect_domain.js");
var Respect_matcher = require("../src/Respect_matcher.js");

function dummy() {
  return /* () */0;
}

function parse(op) {
  return List.hd(Respect_dsl.applyOperation(op, Respect_domain.ExampleGroup[/* empty */0])[/* children */1]);
}

Respect_dsl.register(Respect_dsl.describe("Dsl", /* :: */[
          Respect_dsl.it("Example has a setup", (function () {
                  var grp = parse(Respect_dsl.describe("Group", /* :: */[
                            Respect_dsl.beforeEach(dummy),
                            /* [] */0
                          ]));
                  return Respect_matcher.should((function (param) {
                                return Respect_matcher.equal(1, param);
                              }), List.length(grp[/* setups */2]));
                })),
          /* :: */[
            Respect_dsl.it("Example group has metadata", (function () {
                    var grp = parse(Respect_dsl.$star$star$great(/* tuple */[
                              "name",
                              "value"
                            ], Respect_dsl.describe("Group", /* :: */[
                                  Respect_dsl.beforeEach(dummy),
                                  /* [] */0
                                ])));
                    var expected = Curry._3(Respect_ctx.ContextMap[/* add */3], "name", "value", Respect_ctx.ContextMap[/* empty */0]);
                    return Respect_matcher.should((function (param) {
                                  return Respect_matcher.equal(expected, param);
                                }), grp[/* metadata */4]);
                  })),
            /* :: */[
              Respect_dsl.it("Example has metadata", (function () {
                      var grp = parse(Respect_dsl.describe("Group", /* :: */[
                                Respect_dsl.$star$star$great(/* tuple */[
                                      "name",
                                      "value"
                                    ], Respect_dsl.it("has example", (function () {
                                            return /* () */0;
                                          }))),
                                /* [] */0
                              ]));
                      var expected = Curry._3(Respect_ctx.ContextMap[/* add */3], "name", "value", Respect_ctx.ContextMap[/* empty */0]);
                      return Respect_matcher.should((function (param) {
                                    return Respect_matcher.equal(expected, param);
                                  }), List.hd(grp[/* examples */3])[/* metadata */2]);
                    })),
              /* :: */[
                Respect_dsl.it("Example group has metadata", (function () {
                        var grp = parse(Respect_dsl.$star$star$great(/* tuple */[
                                  "name",
                                  "value"
                                ], Respect_dsl.describe("Group", /* :: */[
                                      Respect_dsl.beforeEach(dummy),
                                      /* [] */0
                                    ])));
                        var expected = Curry._3(Respect_ctx.ContextMap[/* add */3], "name", "value", Respect_ctx.ContextMap[/* empty */0]);
                        return Respect_matcher.should((function (param) {
                                      return Respect_matcher.equal(expected, param);
                                    }), grp[/* metadata */4]);
                      })),
                /* [] */0
              ]
            ]
          ]
        ]));

exports.dummy = dummy;
exports.parse = parse;
/*  Not a pure module */
